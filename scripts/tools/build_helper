################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      mosaic@lists.eurecom.fr
################################################################################

# file build_helper
# brief
# author Navid Nikaein
#
#######################################
SUDO='sudo -S -E'

###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

#-------------------------------------------------------------------------------
cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}


##################
# Error handlers #
##################

handler_EXIT() {
    local exit_code=$?
    [ "$exit_code" -eq 0 ] || echo_error "build have failed"
    exit $exit_code
}

trap handler_EXIT EXIT

########################
# distribution helpers #
########################

# This function return a string to identify the distribution we are running
# If we can't check the distribution, it returns "Unknown"
# This function return always true as exit code by design
# Examples:
#   Ubuntu16.04
#   Debian8.5
get_distribution_release() {
    local distributor
    if distributor=$(lsb_release -si 2>/dev/null) ; then
        echo $distributor$(lsb_release -sr)
    else
        echo Unknown
    fi
}

check_supported_distribution() {
    local distribution=$(get_distribution_release)
    case "$distribution" in
        "Ubuntu16.04") return 0 ;;
        "Ubuntu14.04") return 0 ;;
    esac
    return 1
}

#####################
## cleaner 
#####################
clean_juju_env(){
    $SUDO rm -rf /etc/init/juju*
    $SUDO rm -rf /var/lib/juju
    $SUDO rm -rf ~/.juju/
    juju generate-config
    sudo pkill jujud
    sudo pkill mongod
    
    if [ "$1" == "local" ]; then
      echo_info "switching to local environment, and bootstrapping"
      juju switch local
      juju bootstrap 	
    else 
    	 if [ "$1" == "manual" ]; then	
       	    echo_info "switching to manual environment"
	    juju switch manual 
       	    echo_info "add manually the state machine ip address to juju env (~/.juju/environment.yaml)"
    	 else 
    	    echo_info "switch to the desired environment, and then bootstrap"  	 
    	 fi
    fi 	 	  
}

remove_jox_packages(){
    if [ $1 -gt 0 ]; then 
       OPTION="-y"
    else
       OPTION=""
    fi

    local specific_packages=""
    if ! check_supported_distribution; then
       echo_error "Your distribution $(get_distribution_release) is not supported by jox !"
       exit 1
    fi
    $SUDO apt-get update
    case "$(get_distribution_release)" in 
    	"Ubuntu14.04")
		specific_packages="juju-local qemu-kvm libvirt-bin bridge-utils virt-manager qemu-system uvtool-libvirt uvtool"
	;;
	"Ubuntu16.04")
		specific_packages="zfsutils-linux"
        ;;
    esac

    juju destroy-environment
    $SUDO rm -rf /etc/init/juju*
    $SUDO rm -rf /var/lib/juju
    $SUDO rm -rf ~/.juju/
    $SUDO apt-get remove juju $specific_packages $OPTION
    $SUDO apt-get purge juju $specific_packages $OPTION
    $SUDO apt-get remove juju-core $OPTION
    $SUDO apt-get purge juju-core $OPTION
    $SUDO apt-get autoremove $OPTION
    $SUDO apt-get remove libvirt* kvm qemu* $OPTION
    $SUDO apt-get purge libvirt* kvm qemu* -$OPTION
    $SUDO apt-get autoremove  $OPTION
    $SUDO apt-get purge mongodb-org* $OPTION
    
    $SUDO apt-get remove $OPTION \	
      python \
      python-pip \ 
      python-dev \
      python-pexpect  \
      python-jujuclient	 

    $SUDO pip uninstall  \
    	 puka \ 
	 watchdog \
	 pyyaml

    $SUDO update-rc.d juju remove  
    $SUDO update-rc.d juju-jon-sample-machine-agent remove 
    $SUDO update-rc.d juju-jon-sample-file-storage remove 
    $SUDO juju-jon-sample-file-storage 
    $SUDO rm /etc/init/juju-jon-sample-file-storage 

}
#######################
## installation helper
#######################
check_install_optional (){
    if [ $1 -gt 0 ]; then 
       OPTION="-y"
    else
       OPTION=""
    fi
    #$SUDO apt-get update
    $SUDO apt-get $OPTION install \
    exuberant-ctags \
    vim \
    tree \
    htop \
    doxygen \
    mscgen  \
    tmux \
    screen \
    ccze 
	  
}
# v=$(lsb_release -cs)
check_install_juju(){

    if [ $1 -gt 0 ]; then 
        OPTION="-y"
    else
        OPTION=""
    fi

    local specific_packages=""
    if ! check_supported_distribution; then
       echo_error "Your distribution $(get_distribution_release) is not supported by jox !"
       exit 1
    fi
    case "$(get_distribution_release)" in 
    	"Ubuntu14.04")
		specific_packages="juju-local qemu-kvm libvirt-bin bridge-utils virt-manager qemu-system uvtool-libvirt uvtool"
	;;
	"Ubuntu16.04")
		specific_packages="zfsutils-linux"
        ;;
    esac
	
    #first we remove old installation
    $SUDO apt-get remove $OPTION  juju-core charm-tools juju-quickstart || true
    $SUDO apt-get remove $OPTION $specific_packages|| true
    $SUDO apt-add-repository $OPTION --remove ppa:juju/stable || true

    #The new USRP repository
    $SUDO add-apt-repository $OPTION ppa:juju/stable 
    $SUDO apt-get update
    $SUDO apt-get $OPTION install juju-core charm-tools juju-quickstart 
    $SUDO apt-get $OPTION install $specific_packages 
      
}


check_install_jox() {
    if [ $1 -gt 0 ]; then 
	    OPTION="-y"
    else
	    OPTION=""
    fi			     
    
    $SUDO apt-get $OPTION install \
    	  python \
    	  python-pip \
    	  python-pexpect \
    	  python-jujuclient  

    $SUDO pip install  puka 
    $SUDO pip install  watchdog 
    $SUDO pip install  pyyaml

	 
 #jujuclient
           
}
################################
# set_jox_env
###############################
set_jox_env(){
    fullpath=`readlink -f $BASH_SOURCE`
    [ -f "/.$fullpath" ] || fullpath=`readlink -f $PWD/$fullpath`
    charm_repository=${fullpath%/charms/*}
    jox_path=${fullpath%/orch/*}
    export JUJU_REPOSITORY=$charm_repository
    export JOX_PATH=$jox_path
    
}

set_juju_cli(){
    echo_info "setting the juju cli version to $1"
    export JUJU_CLI_VERSION=$1
}

#############################
## test jox
#############################

test_jox() {
 echo_success "unit tests start (TBC)"	
}

################################
# Function to killall the subprocesses when Ctrl-C Key is hit
###############################
function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
echo_info "** Calling sync now..."
sync 
while true
do
        FORLOOP=FALSE
        # Get all the child process id
        for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
        do
                if [ $i -ne $CURPID ] ; then
                        procid[$arraycounter]=$i
                        arraycounter=`expr $arraycounter + 1`
                        ppid=$i
                        FORLOOP=TRUE
                fi
        done
        if [ "$FORLOOP" = "FALSE" ] ; then
           arraycounter=`expr $arraycounter - 1`
           ## We want to kill child process id first and then parent id's
           while [ $arraycounter -ne 0 ]
           do  
             echo "first we send ctrl-c to program"
             $SUDO kill -INT "${procid[$arraycounter]}"
             sleep 5
             echo "Now we force kill if that didn't work"
             $SUDO kill -9 "${procid[$arraycounter]}" >/dev/null
             arraycounter=`expr $arraycounter - 1`
           done
         exit
        fi
done
}